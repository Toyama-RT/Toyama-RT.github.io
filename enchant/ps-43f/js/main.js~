enchant(); // 簡易会話装置のサンプル

var game_ = null;
//オートスキャン用オブジェクト
var scanner = null;

enchant.Sound.enabledInMobileSafari = true;

if(location.protocol == 'file:'){
    enchant.ENV.USE_WEBAUDIO = false;
    console.log('1');
}

window.onload = function() {
    var Rectangle = enchant.Class.create({
        initialize: function(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        },
        right: {
            get: function() {
                return this.x + this.width;
            }
        },
        bottom: {
            get: function() {
                return this.y + this.height;
            }
        }
    });

    var game_ = new Core(window.innerWidth  , window.innerHeight  );
    //var game_ = new Game( 1000  , 1000  ); // 表示される領域の大きさ設定

    var wiw = window.innerWidth;  //モニター表示範囲幅
    var wih = window.innerHeight; // モニター表示範囲高
    var scx = wiw * 5.5 / 1280; // 文字キー幅の係数
    var scy = wih * 2.5 / 1024; // 文字キー高さ係数
/*     // 表示画面の大きさを表示する機能
	var title1 = new Label('');
	title1.x = 0;
	title1.y = 10;
	game_.rootScene.addChild(title1);
	title1.text = window.innerHeight;
	//title1.text = game_.width;
	var title2 = new Label('');
	title2.x = 0;
	title2.y = 30;
	game_.rootScene.addChild(title2);
	title2.text = window.innerWidth;
	//title2.text = game_.width;
*/

    game_.fps = 15; // frames(フレーム) per(毎) second(秒): 進行スピード設定
    game_.preload('kotoba1.gif', 'kotoba1.mp3', 'kotoba2.gif', 'kotoba2.mp3', 'kotoba3.gif', 'kotoba3.mp3', 'kotoba4.gif', 'kotoba4.mp3', 'jump.mp3', 'gameover.mp3');

    //オートスキャン用オブジェクトの作成
   scanner = new SpriteScanner(game_);

    game_.onload = function() { // 処理実行
        game_.assets['gameover.mp3'].play();


	//表示する画像の設定
        var word1 = new Sprite(200, 50);  // word1というスプライトの大きさ設定
        var word2 = new Sprite(200, 50);  // word2という　以下同文。
        var word3 = new Sprite(200, 50);  // word3という　以下同文。
        var word4 = new Sprite(200, 50);  // word4という　以下同文。

        word1.image = game_.assets['kotoba1.gif']; // word1にロードした画像適用
        word2.image = game_.assets['kotoba2.gif'];  // word2に　以下同文。
        word3.image = game_.assets['kotoba3.gif'];  // word3に
        word4.image = game_.assets['kotoba4.gif'];  // word4に

	word1.x =  wiw * 0.5 -100; // word1の横位置を設定します。　左から幅の50%
        word1.y =  wih * 0.15; // word1の縦位置を設定します。　上から高さの15%
	word1.scaleX = scx; // 幅
	word1.scaleY = scy; // 高さ
	word2.x =  wiw * 0.5 - 100; // word2の横位置設定
        word2.y =  wih * 0.3;  // word2の縦位置設定
	word2.scaleX = scx; // 幅
	word2.scaleY = scy; // 高さ
	word3.x =  wiw * 0.5 -100; // word3の横位置設定
        word3.y =  wih * 0.45; // word3の縦位置を設定
	word3.scaleX = scx; // 幅を1倍にする
	word3.scaleY = scy; // 高さを1倍にする
	word4.x =  wiw * 0.5 - 100; // word4の横位置設定
        word4.y =  wih * 0.6;  // word4の縦位置を設定
	word4.scaleX = scx; // 幅
	word4.scaleY = scy; // 高さ

        game_.rootScene.addChild(word1); // シーンに画像を表示
        game_.rootScene.addChild(word2); // 同上
        game_.rootScene.addChild(word3); // 同上
        game_.rootScene.addChild(word4); // 同上

        game_.rootScene.backgroundColor  = '#7ecef4'; // 背景色設定(16進数)。


        // 「タッチイベント」
            word1.addEventListener(Event.TOUCH_START, function(e) {  // word1をタッチしたら
		word1.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　　//90%の大きさになり
                word1.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　//元に戻る
                game_.assets['kotoba1.mp3'].clone().play(); //言葉を発声する
            });     
            word2.addEventListener(Event.TOUCH_START, function(e) {  // word2をタッチしたら
		word2.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
                word2.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
		game_.assets['kotoba2.mp3'].clone().play(); //言葉を発声する
            });
            word3.addEventListener(Event.TOUCH_START, function(e) {  // word3をタッチしたら
		word3.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
                word3.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
		game_.assets['kotoba3.mp3'].clone().play(); //言葉を発声する
            });
            word4.addEventListener(Event.TOUCH_START, function(e) {  // word4をタッチしたら
		word4.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
                word4.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);
		game_.assets['kotoba4.mp3'].clone().play(); //言葉を発声する
            });

        // オートスキャンイベント
        word1.addEventListener("scanselect", function() {
            //　ボタンのタッチイベントを呼び出し、疑似的にボタンをタッチしたことにする
		word1.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　　//90%の大きさになり
                word1.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　//元に戻る
		game_.assets['kotoba1.mp3'].clone().play(); //言葉を発声する
            // 3秒後にオートスキャンを再開させる：(遅延時間[秒])
            scanner.scanStart(2);
        });
        word2.addEventListener("scanselect", function() {
		word2.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　　//90%の大きさになり
                word2.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　//元に戻る
		game_.assets['kotoba2.mp3'].clone().play(); //言葉を発声する
            scanner.scanStart(2);
        });
        word3.addEventListener("scanselect", function() {
		word3.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　　//90%の大きさになり
                word3.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　//元に戻る
		game_.assets['kotoba3.mp3'].clone().play(); //言葉を発声する
            scanner.scanStart(2);
        });
        word4.addEventListener("scanselect", function() {
		word4.tl.scaleBy( 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　　//90%の大きさになり
                word4.tl.scaleBy( 1 / 0.9, 3, enchant.Easing.ELASTIC_EASEINOUT);　//元に戻る

		game_.assets['kotoba4.mp3'].clone().play(); //言葉を発声する
            scanner.scanStart(2);
        });


        //オートスキャンの対象を設定(入れた順番にスキャンされます)
        scanner.addScanTargets([word1,word2,word3,word4]);

        // スキャンの設定
        scanner.scanSE = 0; // スキャン時のSE（0:OFF、1:ON）
        scanner.selectSE = 1; // 決定時のSE（0:OFF、1:ON）
        scanner.scanVoice = 0; // scan時のスキャン対象の音声読み上げ（0:OFF、1:ON）
        scanner.firstWait = 2; // 最初のスキャンの待ち時間[秒]
        scanner.scanInterval = 1.0; // オートスキャンの間隔[秒]
        scanner.selectWait = 1.0; // 選択後の待ち時間[秒]
        scanner.frameWidth = 3;  // スキャン枠の太さ[px]
        scanner.selectFrameWidth = 5  // スキャン枠の選択時の太さ[px]
        scanner.scanRepaet = -1;    // 何週スキャンして停止するか（-1で無限リピート）
        scanner.focusType = 'frame'; // フォーカスの種類（frame:枠線、background:背景色変更）
        scanner.focusColor = '#ff0000'; // フォーカスの色

        // scan開始
        scanner.scanStart();
        
        //オートスキャンを表示
        game_.rootScene.addChild(scanner);

    }
    game_.start();

};
